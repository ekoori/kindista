;;; Copyright 2012-2013 CommonGoods Network, Inc.
;;;
;;; This file is part of Kindista.
;;;
;;; Kindista is free software: you can redistribute it and/or modify it
;;; under the terms of the GNU Affero General Public License as published
;;; by the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; Kindista is distributed in the hope that it will be useful, but WITHOUT
;;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
;;; License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public License
;;; along with Kindista.  If not, see <http://www.gnu.org/licenses/>.

(in-package :kindista)

(defparameter *tag-scanner* (ppcre:create-scanner "^[-a-z]{3,}$"))

(defparameter *top-tags* '(
                           "activity"
                           "animal"
                           "art"
                           "book"
                           "caregiving"
                           "children"
                           "clothing"
                           "communication"
                           "design"
                           "education"
                           "entertainment"
                           "equipment"
                           "farm"
                           "food"
                           "furniture"
                           "garden"
                           "health"
                           "home"
                           "labor"
                           "law"
                           "maintenance"
                           "marine"
                           "media"
                           "office"
                           "outdoor"
                           "service"
                           "spaces"
                           "spirit"
                           "supplies"
                           "technology"
                           "tools"
                           "transportation"
                          ))

(defun top-tag-p (tag)
  (member tag *top-tags* :test #'string=))

(defvar *forbidden-tags* (make-hash-table :size 750 :test 'equalp))

(defun add-forbidden-tags (&rest tags)
  (dolist (tag tags)
    (setf (gethash tag *forbidden-tags*) nil)))

(defun forbidden-tag-p (tag)
  (nth-value 1 (gethash tag *forbidden-tags*)))

(add-forbidden-tags
  "bitch"
  "anus"
  "arse"
  "arsehold"
  "ass"
  "ass-hat"
  "ass-jabber"
  "ass-pirate"
  "assbag"
  "assbandit"
  "assbanger"
  "felch"
  "skullfuck"
  "assmucus"
  "cumdump"
  "santorum"
  "shit"
  "cunt"
  "anal"
  "licker"
  "motherfucker"
  "whore"
  "fuck"
  "fucker"
  "biatch"
  "blowjob"
  "twat"
  "felching"
  "fudgepacker"
  "nigger"
  "nigga"
  "smegma"
  "turd"
  "wtf"
  "whore"
  "not"
  "like"
  "and"
  "the"
  "but"
  "able"
  "about"
  "above"
  "according"
  "accordingly"
  "across"
  "actually"
  "adj"
  "afterwards"
  "again"
  "against"
  "ago"
  "all"
  "allow"
  "allows"
  "almost"
  "along"
  "alongside"
  "already"
  "also"
  "although"
  "always"
  "amid"
  "amidst"
  "among"
  "amongst"
  "and"
  "another"
  "any"
  "anybody"
  "anyhow"
  "anything"
  "anyway"
  "anyways"
  "anywhere"
  "appear"
  "appreciate"
  "appropriate"
  "are"
  "aren't"
  "aside"
  "associated"
  "away"
  "awfully"
  "became"
  "because"
  "become"
  "becomes"
  "been"
  "believe"
  "below"
  "beside"
  "besides"
  "but"
  "came"
  "can"
  "cannot"
  "cant"
  "certainly"
  "com"
  "come"
  "comes"
  "completely"
  "concerning"
  "consequently"
  "consider"
  "considering"
  "contain"
  "containing"
  "contains"
  "corresponding"
  "could"
  "couldn't"
  "course"
  "currently"
  "dare"
  "decrease"
  "decreasingly"
  "definitely"
  "described"
  "despite"
  "did"
  "directly"
  "does"
  "done"
  "each"
  "either"
  "else"
  "elsewhere"
  "entirely"
  "especially"
  "etc"
  "even"
  "ever"
  "evermore"
  "exactly"
  "example"
  "except"
  "fairly"
  "far"
  "farther"
  "followed"
  "following"
  "follows"
  "for"
  "former"
  "formerly"
  "from"
  "further"
  "furthermore"
  "get"
  "gets"
  "getting"
  "given"
  "gives"
  "goes"
  "going"
  "gone"
  "got"
  "gotten"
  "had"
  "happens"
  "hardly"
  "has"
  "have"
  "having"
  "hello"
  "hence"
  "her"
  "here"
  "hereafter"
  "hereby"
  "herein"
  "hereupon"
  "hither"
  "hopefully"
  "how"
  "howbeit"
  "however"
  "ignored"
  "immediate"
  "inasmuch"
  "inc"
  "increase"
  "increasingly"
  "indeed"
  "indicate"
  "indicated"
  "indicates"
  "insofar"
  "instead"
  "into"
  "its"
  "itself"
  "just"
  "keeps"
  "kept"
  "know"
  "known"
  "knows"
  "lastly"
  "lately"
  "latter"
  "latterly"
  "lest"
  "let"
  "like"
  "liked"
  "likely"
  "likewise"
  "little"
  "look"
  "looks"
  "ltd"
  "main"
  "mainly"
  "may"
  "maybe"
  "meantime"
  "meanwhile"
  "merely"
  "might"
  "mine"
  "minus"
  "miss"
  "more"
  "moreover"
  "most"
  "mostly"
  "mrs"
  "much"
  "must"
  "myself"
  "name"
  "namely"
  "near"
  "nearly"
  "necessary"
  "need"
  "needs"
  "neither"
  "never"
  "never"
  "neverless"
  "nevertheless"
  "nine"
  "nobody"
  "non"
  "none"
  "nonetheless"
  "noone"
  "no-one"
  "nor"
  "normally"
  "not"
  "nothing"
  "notwithstanding"
  "now"
  "nowhere"
  "obviously"
  "off"
  "often"
  "okay"
  "once"
  "ones"
  "only"
  "onto"
  "opposite"
  "or"
  "otherwise"
  "ought"
  "our"
  "ours"
  "ourselves"
  "out"
  "over"
  "own"
  "particular"
  "particularly"
  "per"
  "perfectly"
  "perhaps"
  "placed"
  "please"
  "plus"
  "possible"
  "presumably"
  "probably"
  "provided"
  "provides"
  "que"
  "quickly"
  "quite"
  "rather"
  "really"
  "reasonably"
  "recently"
  "regarding"
  "regardless"
  "regards"
  "relatively"
  "respectively"
  "right"
  "said"
  "same"
  "say"
  "says"
  "secondly"
  "see"
  "seeing"
  "seem"
  "seemed"
  "seeming"
  "seems"
  "seen"
  "self"
  "selves"
  "sensible"
  "sent"
  "serious"
  "seriously"
  "shall"
  "she"
  "should"
  "since"
  "somebody"
  "somehow"
  "someone"
  "something"
  "sometime"
  "sometimes"
  "somewhat"
  "somewhere"
  "soon"
  "sorry"
  "specified"
  "specify"
  "specifying"
  "such"
  "sup"
  "sure"
  "surely"
  "take"
  "taken"
  "taking"
  "tends"
  "than"
  "thank"
  "thanks"
  "thanx"
  "that"
  "thats"
  "the"
  "their"
  "theirs"
  "them"
  "themselves"
  "then"
  "thence"
  "there"
  "thereafter"
  "thereby"
  "therefore"
  "therein"
  "theres"
  "thereupon"
  "these"
  "they"
  "thing"
  "things"
  "think"
  "this"
  "thorough"
  "thoroughly"
  "those"
  "though"
  "thought"
  "thoughts"
  "thrice"
  "thru"
  "thus"
  "thusly"
  "together"
  "too"
  "took"
  "tried"
  "tries"
  "truly"
  "try"
  "trying"
  "twice"
  "two"
  "undoing"
  "unfortunately"
  "unless"
  "unlike"
  "unlikely"
  "until"
  "unto"
  "upon"
  "upwards"
  "use"
  "useful"
  "uses"
  "using"
  "usually"
  "utterly"
  "value"
  "versus"
  "very"
  "via"
  "viz"
  "vs"
  "want"
  "wants"
  "was"
  "way"
  "we"
  "welcome"
  "went"
  "were"
  "what"
  "whatever"
  "when"
  "whence"
  "whenever"
  "where"
  "whereafter"
  "whereas"
  "whereby"
  "wherein"
  "whereupon"
  "wherever"
  "whether"
  "which"
  "whichever"
  "while"
  "whilst"
  "whither"
  "who"
  "whoever"
  "wholly"
  "whom"
  "whomever"
  "whose"
  "why"
  "wish"
  "with"
  "within"
  "without"
  "wonder"
  "wondered"
  "wondering"
  "would"
  "wouldn't"
  "yes"
  "yet"
  "you"
  "your"
  "yours"
  "yourself"
  "yourselves"
)

(defparameter *tag-suggestions*
  '(("appl" ("fruit" "produce"))
    ("massag" ("health" "service"))
    ("reiki" ("health"))
    ("book" ("book"))
    ("engin" ("transportation" "parts" "automobile"))
    ("bike" ("transportation" "bicycle"))
    ("bicycl" ("transportation" "bicycle"))
    ("pant" ("clothing"))
    ("programm" ("technology" "service"))
    ("jar" ("food" "supplies"))
    ("heal" ("health"))
    ("pillow" ("supplies"))
    ("medit" ("spirit"))))

(defun get-tag-suggestions (text)
  (remove-duplicates
    (flatten
      (iter (for word in (stem-text text))
            (appending (cdr (assoc word *tag-suggestions* :test #'string=)))))
    :test #'string=))

(defun all-tags-from-string (string)
  (when string
    (iter (for tag in (split " " (ppcre:regex-replace-all "," (string-downcase string) " ")))
        (when (ppcre:scan *tag-scanner* tag)
          (collect tag)))))

(defun remove-forbidden-tags (tags)
  (remove-if #'forbidden-tag-p tags))

(defun tags-from-string (string)
  (remove-forbidden-tags (all-tags-from-string string)))

